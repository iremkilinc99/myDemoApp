/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package myDemoApp;

import java.util.ArrayList;
import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;
import java.util.HashMap;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;


public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static int search(ArrayList<Integer> array, int e, int e2) {
      System.out.println("inside search");
      if(e2 <=e) return 0 ;
      e = e % e2;  
      if (array == null) return 0 ;
      int min_Difference = 0 ;
      int min_index_element  = 0;
      for (int elt : array) {
          if( (elt - e) <= min_Difference){
            min_Difference = (elt - e);
            min_index_element = elt ;
          }
      }
      if (min_index_element < 0)
          min_index_element  = min_index_element*-1 ;
       
      return (min_index_element%5);
    }

    public static void main(String[] args) {
        ArrayList<String> arr = new ArrayList<>();

        arr.add("https://open.spotify.com/track/69559H9fwS6ZUONWN2knLe?si=ZXeE74rsRHWEfJxutBGEXw");
        arr.add("https://open.spotify.com/track/1fCHR39xOuEE5221AcdJf0?si=CIxe0dwKSqyntFiorlWkSQ");
        arr.add("https://open.spotify.com/track/0FmZTrQah0kZ5q1mgLt0Mr?si=9d2kLBbTSIuSUJvh0y0nqg");
        arr.add("https://open.spotify.com/track/1JgkOeDMGukw4CaYTpV2qs?si=925Wac-URduYxkYRXWGyaA");
        arr.add("https://open.spotify.com/track/6HCkDai7cXHo85eW5mBXc7?si=AWl_JPbyTF25OvEt_TktFQ");

        Logger logger = LogManager.getLogger(App.class);
        int port = Integer.parseInt(System.getenv("PORT"));
    
        port(port);
        logger.error("Current port number:" + port);

        port(getHerokuAssignedPort());

        get("/", (req, res) -> "Hello, World");

        post("/compute", (req, res) -> {
          //System.out.println(req.queryParams("input1"));
          //System.out.println(req.queryParams("input2"));

          String input1 = req.queryParams("input1");
          java.util.Scanner sc1 = new java.util.Scanner(input1);
          sc1.useDelimiter("[;\r\n]+");
          java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
          while (sc1.hasNext())
          {
            int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
            inputList.add(value);
          }
          sc1.close();
          System.out.println(inputList);


          String input2 = req.queryParams("input2").replaceAll("\\s","");
          String input3 = req.queryParams("input3").replaceAll("\\s","");
          int input2AsInt = Integer.parseInt(input2);
          int input3AsInt = Integer.parseInt(input3);

          int result = App.search(inputList, input2AsInt, input2AsInt);
          
          Map<String, String> map = new HashMap<String, String>();
          String song = arr.get(result);
          System.out.println(song);
          map.put("result",song);
          return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());


        get("/compute",
            (rq, rs) -> {
              Map<String, String> map = new HashMap<String, String>();
              map.put("Find your new song.Enter an integer, preferably positive.", "not computed yet!");
              return new ModelAndView(map, "compute.mustache");
            },
            new MustacheTemplateEngine());
    }

    static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        
        return 4567; //return default port if heroku-port isn't set (i.e. on localhost)
    }
}


